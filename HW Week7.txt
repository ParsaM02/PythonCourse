HW Week 7
page 385
----------
1. python list may contain different types.
--------------------------------------------------------------------------------------------
2. 
--------------------------------------------------------------------------------------------
3. lst = [45,-3,16,8]
--------------------------------------------------------------------------------------------
4. (a)10   (b)29   (c)10   (d)29   (e)-4   (f)29   (g)10   (h)illegal
--------------------------------------------------------------------------------------------
page 386
----------
5. (a)3   (b)5   (c)1   (d)5   (e)5   (f)2   (g)0   (h)3
--------------------------------------------------------------------------------------------
6. len()
--------------------------------------------------------------------------------------------
7. [ ]
--------------------------------------------------------------------------------------------
8. (a)[20, 1, -34, 40, -8, 60, 1, 3]   (b)[20, 1, -34]   (c)[-8, 60, 1, 3] 
  (d)[-8, 60, 1, 3]   (e)[40, -8]   (f)[20, 1, -34]   (g)[-8, 60, 1, 3]
   (h)[20, 1, -34, 40, -8, 60, 1, 3]   (i)[20, 1, -34, 40]   (j)[1, -34, 40, -8]
  (k)True   (l)False   (m)8
--------------------------------------------------------------------------------------------
page 387
----------
9.    m n
   1)[0:5]
   2)[6:11]
   3)[0:7:2] + A[7:]
   4)[0:3] + A[6:]
   5)[0:5]
   6)[0:] + [2, 4, 6, 8, 10]
   7)[-1:-6:-1]
   8)[0:4] + [8, 10]
   9)[2,4] + A[0:4]
  10)[0:1] + [4,6,8] + A[1:2]
  11)[2] + A[0:3] + [10]
--------------------------------------------------------------------------------------------
10. (a)[8, 8, 8, 8]   (b)[2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7]   
   (c)[1, 2, 3, 'a', 'b', 'c', 'd']   (d)[1, 2, 1, 2, 1, 2, 4, 2]
    (e)[1, 2, 4, 2, 1, 2, 4, 2, 1, 2, 4, 2]
--------------------------------------------------------------------------------------------  
11. (a)[3, 5, 7, 9]   (b)[50, 60, 70, 80, 90]   (c)[12, 15, 18]   
   (d)[(0,0),(0,1),(0,2),(0,3),(1,0),(1,1),(1,2),(1,3),(2,0),(2,1),(2,2),(2,3)]
  (e)(0,0),(0,2),(1,1),(1,3),(2,0),(2,2)]
--------------------------------------------------------------------------------------------
12. (a)lst = [x**2 for x in range(1,6)]   (b)lst=[x+0.25 for x in[0,0.25,0.5,0.75,1.0,1.25]]
   (c)lst = [(x , y) for x in ['a','b'] for y in range(0,3)]
--------------------------------------------------------------------------------------------
13. x in lst
--------------------------------------------------------------------------------------------
14. allows us to process the items in reverse order.
--------------------------------------------------------------------------------------------
15. def sum_pas(x):
    sum=0
    for i in sum_pas(x):
        if i>0:
            sum=sum+i
            print(sum)
--------------------------------------------------------------------------------------------
page 388 
----------
16. lst = [3,5,4,-1,0]
def count_evens(lst):
    sum_evens=0
    for x in lst:
        if x%2==0:
            sum=sum_evens+1
            print(sum)
count_evens(lst)
--------------------------------------------------------------------------------------------
17. lst = [1, 2, 3, 4, 5, 6]
num = 2
def print_big_enough(lst, num):
    sliced_lst = []
    for i in lst:
        if i >= num:
            sliced_lst += [i]
    print(sliced_lst)
print_big_enough(lst, num)
-------------------------------------------------------------------------------------------- 
18. def next_number(lst):
    max = 0
    num = 0
    for i in lst:
        if i > max:
            max = i
    for i in range(1, max + 1):
        if i not in lst:
            return i
    return max + 1
print(next_number(lst))
--------------------------------------------------------------------------------------------
19. 
--------------------------------------------------------------------------------------------
20. def matrix(satr,sotoon):
    result = []
    for i in range(satr):
        partial_result = []
        for i in range(sotoon):
            partial_result.append(1)
        result.append(partial_result)
    return result
m = matrix(6, 9)
for i in m:
    print(i)
m[2][4] = 0
print("-----")
for i in m:
    print(i)
--------------------------------------------------------------------------------------------
21.
--------------------------------------------------------------------------------------------




   